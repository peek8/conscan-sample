name: Build and Scan Multiple Images

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.collect.outputs.images }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: asraf344
          password: ${{ secrets.GITHUB_TOKEN }}    

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build all service images
        run: |
          VERSION=${GITHUB_REF_NAME}   # e.g., v1.2.3
          REPO="ghcr.io/${{github.repository}}"
          IMAGES=""

          for service in alpine-secret node-nodemon ubuntu-cpufetch; do
            DIR="image-builds/${service}"
            if [ -f "${DIR}/Dockerfile" ]; then
              IMAGE="${REPO}/${service}:${VERSION}"
              echo "üöÄ Building $IMAGE"
              docker buildx build \
                --platform linux/amd64 \
                --tag "$IMAGE" \
                -f "${DIR}/Dockerfile" "${DIR}" \
                --push
              IMAGES="$IMAGES $IMAGE"
            fi
          done

          echo "Built images: $IMAGES"
          echo "IMAGES=$IMAGES" >> "$GITHUB_ENV"

      - name: Collect outputs
        id: collect
        run: |
          echo "images=${{ env.IMAGES }}" >> "$GITHUB_OUTPUT"

  scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: asraf344
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Run conscan on built images
        run: |
          IMAGES="${{needs.build.outputs.images}}"
          echo "üß† Scanning images: $IMAGES"
          mkdir -p reports cache
          chmod 777 reports cache

          for IMG in $IMAGES; do
            NAME=$(basename "$IMG" | cut -d: -f1)
            echo "üîç Scanning $IMG ..."
            docker run --rm \
              -v "$HOME/.docker/config.json":/.docker/config.json \
              -v "$(pwd)/reports:/reports" \
              -v "$(pwd)/cache:/.cache" \
              ghcr.io/peek8/conscan \
              scan "$IMG" \
              --format html \
              --output "/reports/${NAME}-report.html"
          done
          ls -l reports/

      - name: Upload scan reports
        uses: actions/upload-artifact@v4
        with:
          name: scan-reports
          path: reports/
